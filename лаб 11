#Обчислення інтеграла методом прямокутників 
 from scipy import integrate
import numpy as np
eps = 0.001
lower_limit = 1.4
upper_limit = 2.1
def integrand(x):
    return 1 / np.sqrt(3 * x - 1)
def left_rectangle_rule(func, a, b, n):
    h = (b - a) / n
    result_sum = sum(func(a + i * h) for i in range(n))
    return result_sum * h
def right_rectangle_rule(func, a, b, n):
    h = (b - a) / n
    result_sum = sum(func(a + i * h) for i in range(1, n + 1))
    return result_sum * h
def average_rectangle_rule(func, a, b, n):
    h = (b - a) / n
    result_sum = sum(func(a + i * h) for i in range(n))
    return result_sum * h
integral_value, error = integrate.quad(integrand, lower_limit, upper_limit)
# Checking accuracy using the Runge's rule
if abs(left_rectangle_rule(integrand, lower_limit, upper_limit, 2 * 10) -
       left_rectangle_rule(integrand, lower_limit, upper_limit, 10)) / 3. <= eps:
    print("Left rectangle:", round(left_rectangle_rule(integrand, lower_limit, upper_limit, 10), 5))
print("Right rectangle:", round(right_rectangle_rule(integrand, lower_limit, upper_limit, 10), 5))
print("Average rectangle:", round(average_rectangle_rule(integrand, lower_limit, upper_limit, 10), 5))
print("Check for the rectangle method =", round(integral_value, 5))

#Обчислення інтегралу методом трапецій 
from scipy import integrate  
import numpy as np
def integrand(x): 
    return np.log(x**2 + 1) / x
lower_limit = 0.8
upper_limit = 1.6
num_intervals = 10
def trapezoidal_rule(integrand, lower_limit, upper_limit, num_intervals):
    interval_width = (upper_limit - lower_limit) / num_intervals
    x_values = np.linspace(lower_limit, upper_limit, num_intervals + 1)
    sum_val = np.sum(2 * integrand(x_values[1:-1])) + integrand(x_values[0]) + integrand(x_values[-1])
    result = interval_width / 2 * sum_val
    return result
integral1 = trapezoidal_rule(integrand, lower_limit, upper_limit, num_intervals)
num_intervals *= 2
integral2 = trapezoidal_rule(integrand, lower_limit, upper_limit, num_intervals)
while abs(integral2 - integral1) / 3 > 0.001:
    integral1 = integral2
    num_intervals *= 2
    integral2 = trapezoidal_rule(integrand, lower_limit, upper_limit, num_intervals)
print("Trapezoidal method:", round(integral2, 5))
quad_result, quad_error = integrate.quad(integrand, lower_limit, upper_limit)
print("Check for the trapezoidal method =", round(quad_result, 5))

#Обчислення інтеграла методом Симпсона 
) from scipy import integrate
import numpy as np
def integrand(x):
    return 1 / np.sqrt(0.2 * x**2 + 1)
lower_limit = 1.3
upper_limit = 2.5
num_intervals = 8
def simpson_integration(func, a, b, n):
    h = (b - a) / n
    integral = func(a) + func(b)
    for i in range(1, n):
        x = a + i * h
        weight = 2 if i % 2 == 0 else 4
        integral += weight * func(x)
    integral *= h / 3
    return integral
integral1 = simpson_integration(integrand, lower_limit, upper_limit, num_intervals)
num_intervals *= 2
integral2 = simpson_integration(integrand, lower_limit, upper_limit, num_intervals)
while abs(integral2 - integral1) / 15 > 0.001:
    integral1 = integral2
    num_intervals *= 2
    integral2 = simpson_integration(integrand, lower_limit, upper_limit, num_intervals)
print("Simpson method:", round(integral2, 3))
result, error = integrate.quad(integrand, lower_limit, upper_limit)
print("Check for the Simpson method:", round(result, 3))
